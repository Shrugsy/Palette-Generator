{"version":3,"sources":["components/PaletteItem.js","components/LoadingAnimation.js","components/ErrorSnackbar.js","components/Palette.js","scripts/checkImage.js","components/ImageUpload.js","App.js","index.js"],"names":["rgbToHex","rgb","hex","Number","toString","length","PaletteItem","colors","type","onCopy","rgbString","hexString","map","v","join","colourDiv","width","backgroundColor","cursor","textAlign","handleCopy","text","el","document","querySelector","console","log","classList","add","setTimeout","remove","Fragment","style","display","height","margin","border","className","title","id","Loading","message","ErrorSnackbar","messageType","errorMessage","successMessage","snackbarShow","closeSnackbar","handleClose","e","reason","Snackbar","autoHideDuration","onClose","open","Alert","severity","imageStyles","Palette","props","handleFetchErrors","request","ok","handleError","status","statusText","setState","loading","state","palettes","loadMessage","this","fetchPalettes","prevProps","imageUrl","imageSrc","good","bad","img","Image","onload","onerror","src","checkImage","encodedUrl","encodeURIComponent","url","fetch","then","res","json","data","catch","err","paletteItems","Object","keys","property","hasOwnProperty","push","key","num","Math","round","alt","LoadingAnimation","Component","formStyles","ImageUpload","handleSubmit","preventDefault","inputField","value","validUrl","handleDropzoneChange","files","imageCompression","maxSizeMB","maxWidthOrHeight","compressedImage","formData","FormData","append","method","body","Box","m","onSubmit","noValidate","autoComplete","flexGrow","TextField","fullWidth","label","Button","variant","color","onDrop","getRootProps","getInputProps","accept","App","fontSize","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e8264617.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { withTheme } from \"@material-ui/styles\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\n// onCopy is a function, send it what you copied\r\nconst PaletteItem = ({ colors, type, onCopy }) => {\r\n  // console.log(colors);\r\n  // should be array of length 4\r\n  let containerStyle = {\r\n    display: \"flex\",\r\n    width: \"100%\",\r\n    height: \"70px\",\r\n    margin: \"auto\",\r\n    border: \"1px solid black\"\r\n  };\r\n  let styles = {\r\n    width: \"50%\",\r\n    margin: \"auto\",\r\n    backgroundColor: \"white\"\r\n  };\r\n\r\n  let rgbString = `RGB(${colors[0]}, ${colors[1]}, ${colors[2]})`;\r\n  let hexString = \"#\" + colors.map(v => rgbToHex(v)).join(\"\");\r\n\r\n  let colourDiv = {\r\n    width: \"50%\",\r\n    backgroundColor: rgbString,\r\n    cursor: 'pointer',\r\n    textAlign: 'center'\r\n  };\r\n\r\n  // let el;\r\n\r\n  // useEffect(()=>{\r\n  //   el = document.querySelector(`#${type}`)\r\n  // }, [])\r\n\r\n  // let colorItem = React.createRef();\r\n\r\n  const handleCopy = text => {\r\n    // console.log(colorItem.current)\r\n    let el = document.querySelector(`#${type}`)\r\n    onCopy(hexString)\r\n    console.log('adding class')\r\n    el.classList.add('copied');\r\n    setTimeout(()=>{\r\n      console.log('removing class')\r\n      if (el) {\r\n        el.classList.remove('copied')\r\n      }\r\n    }, 3000)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div style={containerStyle}>\r\n        <div style={styles}>\r\n          <div>\r\n            <em>{type}</em>\r\n          </div>\r\n          <CopyToClipboard \r\n          text={rgbString}\r\n          onCopy={() => handleCopy(rgbString)}\r\n          >\r\n            <div className={\"rgbString\"} title={`Click to copy ${rgbString}`}>{rgbString}</div>\r\n          </CopyToClipboard>\r\n          <CopyToClipboard \r\n          text={hexString}\r\n          onCopy={() => handleCopy(hexString)}\r\n          >\r\n            <div className={\"hexString\"} title={`Click to copy ${hexString}`}>{hexString}</div>\r\n          </CopyToClipboard>\r\n        </div>\r\n        <CopyToClipboard \r\n          text={hexString}\r\n          onCopy={() => handleCopy(hexString)}\r\n        >\r\n          <div className=\"paletteItemColor\" id={type} style={colourDiv} title={`Click to copy ${hexString}`}>\r\n            <FileCopyIcon/>\r\n          </div>\r\n        </CopyToClipboard>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nvar rgbToHex = function(rgb) {\r\n  var hex = Number(rgb).toString(16);\r\n  if (hex.length < 2) {\r\n    hex = \"0\" + hex;\r\n  }\r\n  return hex;\r\n};\r\n\r\nexport default PaletteItem;\r\n","import React from 'react';\r\n\r\nconst Loading = ({message}) => {\r\n    return (<React.Fragment>\r\n        <div className=\"loader\" id=\"loader-4\">\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n        </div>\r\n        <div>{message}</div>\r\n        </React.Fragment>)\r\n}\r\nexport default Loading","import React from \"react\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nconst ErrorSnackbar = ({ errorMessage, successMessage, snackbarShow, closeSnackbar }) => {\r\n  const handleClose = (e, reason) => {\r\n    // console.log(reason)\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    closeSnackbar();\r\n  };\r\n\r\n  let messageType;\r\n  if (errorMessage) {\r\n    messageType = 'error'\r\n  } else {\r\n    messageType = 'success'\r\n  }\r\n\r\n  // TODO include success snackbar\r\n  return (<Snackbar autoHideDuration={3000} onClose={handleClose} open={snackbarShow}>\r\n  <Alert onClose={handleClose} severity={messageType}>\r\n    {errorMessage}\r\n    {successMessage}\r\n  </Alert>\r\n</Snackbar>)\r\n}\r\nexport default ErrorSnackbar","import React, { Component } from \"react\";\r\n// import PropTypes from 'prop-types'\r\nimport PaletteItem from \"./PaletteItem\";\r\nimport LoadingAnimation from \"./LoadingAnimation\";\r\nimport ErrorSnackbar from \"./ErrorSnackbar\";\r\n\r\nlet imageStyles = {\r\n  width: \"100%\"\r\n};\r\n\r\nexport default class Palette extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      palettes: {},\r\n      loading: false,\r\n      loadMessage: \"\",\r\n      errorMessage: \"\",\r\n      successMessage: \"\",\r\n      snackbarShow: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchPalettes();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.imageUrl !== prevProps.imageUrl) {\r\n      this.fetchPalettes();\r\n    }\r\n  }\r\n\r\n  checkImage(imageSrc, good, bad) {\r\n    var img = new Image();\r\n    img.onload = good;\r\n    img.onerror = bad;\r\n    img.src = imageSrc;\r\n  }\r\n\r\n  fetchPalettes() {\r\n    this.checkImage(\r\n      this.props.imageUrl,\r\n      () => {\r\n        // Good image url\r\n        this.setState(\r\n          {\r\n            snackbarShow: false,\r\n            palettes: {},\r\n            loading: true,\r\n            loadMessage: \"Please wait while your image is being analyzed\"\r\n          },\r\n          () => {\r\n            let encodedUrl = encodeURIComponent(this.props.imageUrl);\r\n            let url = `/api/palette/image=${encodedUrl}`;\r\n            fetch(url)\r\n              .then(this.handleFetchErrors)\r\n              .then(res => res.json())\r\n              .then(data => {\r\n                this.setState({\r\n                  palettes: data,\r\n                  loading: false\r\n                });\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n              });\r\n          }\r\n        );\r\n      },\r\n      () => {\r\n        // Bad image url\r\n        this.handleError(\"Bad image url. Please try a different URL.\");\r\n      }\r\n    );\r\n  }\r\n\r\n  handleFetchErrors = request => {\r\n    if (!request.ok) {\r\n      this.handleError(`${request.status} ${request.statusText}`);\r\n    }\r\n    return request;\r\n  };\r\n\r\n  handleError = message => {\r\n    console.log(\"error: \", message);\r\n    this.setState({\r\n      errorMessage: `Error: ${message}`,\r\n      successMessage: \"\",\r\n      snackbarShow: true,\r\n      loading: false\r\n    });\r\n  };\r\n\r\n  closeSnackbar = () => {\r\n    this.setState({ snackbarShow: false, errorMessage: \"\" });\r\n  };\r\n\r\n  handleCopy = text => {\r\n    console.log(\"handling copy: \" + text);\r\n    this.setState({\r\n      errorMessage: \"\",\r\n      successMessage: \"Successfully copied to clipboard: \" + text,\r\n      snackbarShow: true\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { imageUrl } = this.props;\r\n    let {\r\n      palettes,\r\n      loading,\r\n      loadMessage,\r\n      errorMessage,\r\n      successMessage,\r\n      snackbarShow\r\n    } = this.state;\r\n    let paletteItems;\r\n    if (Object.keys(palettes).length > 0) {\r\n      paletteItems = [];\r\n      for (let property in palettes) {\r\n        if (palettes.hasOwnProperty(property)) {\r\n          // console.log(property)\r\n          // console.log(palettes[property].rgb.map(num=>Math.round(num)))\r\n          paletteItems.push(\r\n            <PaletteItem\r\n              key={property}\r\n              colors={palettes[property].rgb.map(num=>Math.round(num))}\r\n              type={property}\r\n              onCopy={this.handleCopy}\r\n            />\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className={\"content-container\"}>\r\n          <div className={\"image-container\"}>\r\n            <img style={imageStyles} src={imageUrl} alt=\"\" />\r\n          </div>\r\n          <div className={\"palette-container\"}>\r\n            {paletteItems}\r\n            {loading && <LoadingAnimation message={loadMessage} />}\r\n            <ErrorSnackbar\r\n              snackbarShow={snackbarShow}\r\n              errorMessage={errorMessage}\r\n              successMessage={successMessage}\r\n              closeSnackbar={this.closeSnackbar}\r\n            />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","  \r\n  \r\n  function checkImage(imageSrc, good, bad) {\r\n    var img = new Image();\r\n    img.onload = good;\r\n    img.onerror = bad;\r\n    img.src = imageSrc;\r\n  }\r\n\r\n  export default checkImage;","import React, { Component } from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { Box, Button } from \"@material-ui/core\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Palette from \"./Palette\";\r\nimport checkImage from \"../scripts/checkImage\";\r\nimport LoadingAnimation from \"./LoadingAnimation\";\r\nimport imageCompression from \"browser-image-compression\";\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\n// TODO: fix css for focus, and fix click area of dropzone\r\n\r\nconst formStyles = {\r\n  margin: \"20px 0 20px 0\"\r\n};\r\n\r\nexport default class ImageUpload extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      imageUrl: \"\",\r\n      validUrl: false,\r\n      loading: false,\r\n      loadMessage: \"\"\r\n    };\r\n  }\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    let inputField = document.querySelector(\"#standard-basic\");\r\n    if (inputField.value) {\r\n      // TODO: Check if URL is valid image\r\n      // this is being done in 'Palette.js' currently but should be global via redux\r\n      console.log(\"new url: \", inputField.value);\r\n      this.setState(\r\n        {\r\n          imageUrl: inputField.value,\r\n          validUrl: true\r\n        },\r\n        () => {\r\n          inputField.value = \"\";\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  handleDropzoneChange = files => {\r\n    const options = {\r\n      maxSizeMB: 1,\r\n      maxWidthOrHeight: 1920\r\n    };\r\n    this.setState({\r\n      imageUrl: \"\",\r\n      validUrl: false,\r\n      loading: true,\r\n      loadMessage: \"Please wait while image is being uploaded\"\r\n    });\r\n    imageCompression(files[0], options).then(compressedImage => {\r\n      // console.log(compressedImage);\r\n      // console.log(files[0])\r\n      // let img = files[0];\r\n      let img = compressedImage;\r\n      if (img) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", img);\r\n        // console.log(formData);\r\n\r\n        fetch(\"/image-upload\", {\r\n          method: \"POST\",\r\n          body: formData\r\n        })\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            // console.log(\"setting state for new image url: \", data.url);\r\n            checkImage(\r\n              data.url,\r\n              () => {\r\n                // good\r\n                this.setState({\r\n                  imageUrl: data.url,\r\n                  validUrl: true,\r\n                  loading: false,\r\n                  loadMessage: \"\"\r\n                });\r\n              },\r\n              () => {\r\n                // bad\r\n                this.setState({\r\n                  imageUrl: data.url,\r\n                  validUrl: false,\r\n                  loading: false,\r\n                  loadMessage: \"\"\r\n                });\r\n              }\r\n            );\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { imageUrl, validUrl, loading, loadMessage } = this.state;\r\n\r\n    return (\r\n      <Box m={2}>\r\n        Paste an image URL or upload an image in order to receive a colour\r\n        palette based on the colours detected in the image.\r\n        <form\r\n          style={formStyles}\r\n          onSubmit={this.handleSubmit}\r\n          noValidate\r\n          autoComplete=\"off\"\r\n        >\r\n          <div style={{ width: \"100%\", display: \"flex\" }}>\r\n            <div style={{ flexGrow: \"100\" }}>\r\n              <TextField fullWidth id=\"standard-basic\" label=\"Image URL\" />\r\n            </div>\r\n            <div style={{ flexGrow: \"0\" }}>\r\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                Submit URL\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n            <Dropzone onDrop={this.handleDropzoneChange}>\r\n              {({ getRootProps, getInputProps }) => (\r\n                <section className=\"dropzone\">\r\n                  <div {...getRootProps()}>\r\n                    <input\r\n                      {...getInputProps({\r\n                        accept: \"image/jpeg, image/png, image/bmp\"\r\n                      })}\r\n                    />\r\n                    <CloudUploadIcon/>\r\n                    <p>\r\n                      Drag 'n' drop some files here, or click to select files\r\n                    </p>\r\n                    <em>\r\n                      (Only *.jpeg, *.png and *.bmp images will be accepted)\r\n                    </em>\r\n                    \r\n                  </div>\r\n                </section>\r\n              )}\r\n            </Dropzone>\r\n            {loading && <LoadingAnimation message={loadMessage} />}\r\n          </div>\r\n        </form>\r\n        {validUrl && <Palette imageUrl={imageUrl} />}\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ImageUpload from \"./components/ImageUpload\";\nimport PaletteIcon from '@material-ui/icons/Palette';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1><PaletteIcon fontSize={'large'}/>Palette Generator</h1>\n      <ImageUpload />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}